<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MOMOeven</title>
  
  <subtitle>最是人间不可留，回忆辞新人辞旧.</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-10-23T02:46:36.696Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>MOMOeven</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C#学习(14)</title>
    <link href="http://example.com/posts/88ee3bfe.html"/>
    <id>http://example.com/posts/88ee3bfe.html</id>
    <published>2022-10-21T20:01:00.000Z</published>
    <updated>2022-10-23T02:46:36.696Z</updated>
    
    
    
    
    
    <category term="C#学习笔记" scheme="http://example.com/tags/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C#学习(13类及命名空间)</title>
    <link href="http://example.com/posts/933b7bbe.html"/>
    <id>http://example.com/posts/933b7bbe.html</id>
    <published>2022-10-21T20:00:00.000Z</published>
    <updated>2022-10-23T02:46:36.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-中类的定义及命名空间"><a href="#C-中类的定义及命名空间" class="headerlink" title="C#中类的定义及命名空间"></a>C#中类的定义及命名空间</h1><p><strong><em>类是一个能存储数据并执行代码的数据结构，它包含数据成员和函数成员。</em></strong></p><ul><li><strong><em>数据成员：</em></strong> 存储与类或类相关的数据。（表示其特质）</li><li><strong><em>函数成员：</em></strong> 也就是  <strong><em>方法</em></strong> ，用于执行某些行动或步骤，通常通过它来模拟现实中某些事物的功能 。</li></ul><hr><h2 id="类的添加"><a href="#类的添加" class="headerlink" title="类的添加"></a>类的添加</h2><p><strong><em>在Visual Studio中右键项目找到添加再在添加中找到类便可。</em></strong><br>如图我们定义了一个Apple类，并为其添加了一个枚举型的变量，现在就为其讲解各字段含义<img src="https://pic1.imgdb.cn/item/63525da816f2c2beb1fac089.jpg" alt="img_class"><br>类由 <strong><em>访问修饰符  class 类名</em></strong> 组成</p><ul><li><strong><em>访问修饰符：</em></strong> 定义了类的访问等级一般默认不写，因为默认是有 <strong><em>internal(访问仅限于当前程序)</em></strong><br>| 访问修饰符 | 说明 |<br>| :—- | :—|<br>| public | 公有访问，安全性最低，不任何人都能访问 。 |<br>| private | 私有访问，针对于对象自己而言最安全，只限于本类成员访问，子类，实例都不能访问。 |<br>| protected | 保护访问，只限于本类和子类访问，实例不能访问 |<br>| internal | 内部访问，只限于本项目类访问，其它不能访问。 |<br>| protected internal | 内部保护访问，只限于本项目或子类访问，其不能访问。 |<br><strong><em>一个类成员或者类型只能有一个访问修饰符，类的成员默认访问修饰符为privat</em></strong><ul><li><strong><em>class：</em></strong> 关键字，用于声明一个类，和之前的枚举enum，结构体的struct作用是一样的。</li><li><strong><em>类名使用帕斯卡命名法不能使用关键字作为类名</em></strong></li><li><strong><em>字段也就是大括号中的那一部分属于类的变量它可以是任何类型，是用来保存数据的，能够被写入和读取。</em></strong> 格式为 <strong><em>（访问修饰符  数据类型   数据名称；）</em></strong></li></ul></li></ul><h2 id="类的使用"><a href="#类的使用" class="headerlink" title="类的使用"></a>类的使用</h2><p><strong><em>类的使用分为两部分实例化一个对象和字段的赋值</em></strong><br>现在我们就以上方图片为例使用这个Apple类<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在接口函数中实例化</span></span><br><span class="line">Apple apple = <span class="keyword">new</span> Apple();</span><br><span class="line"><span class="comment">// 字段赋值</span></span><br><span class="line">apple.color = Color.Red;</span><br><span class="line">apple.weight = <span class="number">100</span>;</span><br><span class="line">apple.shaple = <span class="string">&quot;圆形&quot;</span>;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;这个苹果的颜色是&#123;0&#125;它有&#123;1克重，形状是&#123;2&#125;。&quot;</span>, apple.color, apple.weight, apple.shaple);</span><br></pre></td></tr></table></figure><br><strong><em>输出结果：</em></strong><br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个苹果的颜色是Red它有100克重，形状是圆形。</span><br></pre></td></tr></table></figure></p><h2 id="类的变量私有化及使用及普通方法的使用"><a href="#类的变量私有化及使用及普通方法的使用" class="headerlink" title="类的变量私有化及使用及普通方法的使用"></a>类的变量私有化及使用及普通方法的使用</h2><ul><li><strong><em>普通方法</em></strong><br> 在类中的作用是对对象的“行”为进行描述，也就是这个对象能干什么。、</li><li><strong><em>普通方法的语法</em></strong><br>  <strong><em>访问修饰符    返回值     方法名（参数列表） { 方法具体代码 }</em></strong> </li><li><strong><em>演示定义一个Person类，描述人</em></strong><br>   字段名称包括：姓名，年龄，性别，地址；并且对字段进行封装<br>   普通方法包括：吃饭，睡觉，上班<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="built_in">enum</span> Gender &#123;</span><br><span class="line"> 男,</span><br><span class="line"> 女</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">// Person类，描述人</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title">Person</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line"> <span class="keyword">public</span> Gender  gender;</span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">string</span> address;</span><br><span class="line"> <span class="comment">// 定义方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Eat</span>()</span> &#123;</span><br><span class="line">  Console.WriteLine(<span class="string">&quot;我会吃饭！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Sleep</span>()</span> &#123;</span><br><span class="line">  Console.WriteLine(<span class="string">&quot;我会睡觉！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Work</span>()</span> &#123;</span><br><span class="line">  Console.WriteLine(<span class="string">&quot;我会工作！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong><em>主程序中</em></strong><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.name = <span class="string">&quot;MOMOeven&quot;</span>;</span><br><span class="line">p1.age = <span class="number">19</span>;</span><br><span class="line">p1.gender = Gender.男;</span><br><span class="line">p1.address = <span class="string">&quot;贵州&quot;</span>;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;我的姓名是&#123;0&#125;,性别是&#123;1&#125;年龄是&#123;2&#125;住址是&#123;3&#125;&quot;</span>, p1.name, p1.age, p1.gender, p1.address);</span><br><span class="line">p1.Eat();</span><br><span class="line">p1.Sleep();</span><br><span class="line">p1.Work();</span><br></pre></td></tr></table></figure> 这种方法通常会被恶意赋值，因为public的安全性较低，我们通常使用private对程序中的数据进行操作。</li><li><strong><em>通过访问修饰符实现对数据的控制</em></strong><br> 字段是我们对象的核心数据，如果直接public直接公开的话就可能会被恶意赋值使得我们输出的语句在现实逻辑上得不到认可，所以字段通常使用private进行修饰，这样通过<strong><em>对象名.XXX</em></strong> 的方式访问不到，但我们又需要<strong><em>对象名.XXX</em></strong>的方式进行访问操作，这时就出现一个新的东西 <strong><em>”属性“</em></strong>。</li><li><strong><em>属性</em></strong><br> 属性的字段是对字段进行保护我们将 <strong><em>属性设置为public可以直接访问，然后属性设置的字段设置为private，我们就可以通过属性间接操作字段</em></strong>。<ul><li><strong><em>属性的语法</em></strong><br> <em>*</em>public 数据类型 属性名  {<pre><code> get &#123; return  字段名;&#125; set &#123; 字段名 = value;&#125;</code></pre> }<strong><em></em></strong>数据类型：<strong><em> 和要保护的数据类型相同。</em></strong>属性名：<strong><em> 和字段名一样不过首字母需要大写。</em></strong>get：<strong><em> 当通过属性名取值时，自动调用get中的代码。</em></strong>set：<strong><em>  当通过属性名给字段赋值的时候，自动调用set中的代码。</em></strong>value：<em>*</em> 系统关键字表示，表示赋给属性的值。</li></ul></li><li><strong><em>使用属性来保护字段</em></strong>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="built_in">enum</span> Gender &#123;</span><br><span class="line"> 男,</span><br><span class="line"> 女</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">// Person类，描述人</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title">Person</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line"> <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line"> <span class="keyword">public</span> Gender  gender;</span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">string</span> address;</span><br><span class="line">  <span class="comment">// 定义属性</span></span><br><span class="line">     <span class="keyword">public</span> <span class="built_in">int</span> Age &#123;</span><br><span class="line">      <span class="keyword">get</span> &#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">      <span class="keyword">set</span> &#123; </span><br><span class="line">      <span class="comment">// 属性的安全校验</span></span><br><span class="line">      <span class="keyword">if</span> ( <span class="keyword">value</span> &gt; <span class="number">100</span> || <span class="keyword">value</span> &lt;=<span class="number">0</span>) &#123;</span><br><span class="line">  Console.Write(<span class="string">&quot;输入年龄有误重新输入：&quot;</span>);</span><br><span class="line">  age = Convert.ToInt32(Console.ReadLine());</span><br><span class="line">         &#125;  <span class="keyword">else</span> &#123;</span><br><span class="line">          age = <span class="keyword">value</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> <span class="comment">// 定义方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Eat</span>()</span> &#123;</span><br><span class="line">  Console.WriteLine(<span class="string">&quot;我会吃饭！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Sleep</span>()</span> &#123;</span><br><span class="line">  Console.WriteLine(<span class="string">&quot;我会睡觉！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Work</span>()</span> &#123;</span><br><span class="line">  Console.WriteLine(<span class="string">&quot;我会工作！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong><em>主程序中</em></strong><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.name = <span class="string">&quot;MOMOeven&quot;</span>;</span><br><span class="line">p1.Age = <span class="number">19</span>;</span><br><span class="line">p1.gender = Gender.男;</span><br><span class="line">p1.address = <span class="string">&quot;贵州&quot;</span>;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;我的姓名是&#123;0&#125;,性别是&#123;1&#125;年龄是&#123;2&#125;住址是&#123;3&#125;&quot;</span>, p1.name, p1.Age, p1.gender, p1.address);</span><br><span class="line">p1.Eat();</span><br><span class="line">p1.Sleep();</span><br><span class="line">p1.Work();</span><br></pre></td></tr></table></figure><ul><li><strong><em>执行流程：</em></strong><br> 1，在主程序中使用属性的方法进行赋值时，将会执行类中的set函数，将19传给value并赋给方法中的age。<br> 2，再回到主程序中当，当通过p1.Age取值打印时，会调用类中的get函数，return age直接将这个值给返回出去。</li></ul></li></ul><h2 id="C-中的命名空间"><a href="#C-中的命名空间" class="headerlink" title="C#中的命名空间"></a>C#中的命名空间</h2><ul><li>什么是命名空间<br> 命名空间也叫名称空间，英文名是namespace。</li><li>*命名空间的作用<br> 对代码文件进行分类管理</li><li>命名空间的语法<br> 定义命名空间：namespace 空间名称{ 类 }<br> 引入命名空间：using 空间名称<br><strong><em>命名空间类似于文件夹，不同文件夹下的文件可以同名。</em></strong> </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-中类的定义及命名空间&quot;&gt;&lt;a href=&quot;#C-中类的定义及命名空间&quot; class=&quot;headerlink&quot; title=&quot;C#中类的定义及命名空间&quot;&gt;&lt;/a&gt;C#中类的定义及命名空间&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;类是一个能存储数据并执行代码的数据结</summary>
      
    
    
    
    
    <category term="C#学习笔记" scheme="http://example.com/tags/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C#学习(12枚举与结构体)</title>
    <link href="http://example.com/posts/50bcb8d7.html"/>
    <id>http://example.com/posts/50bcb8d7.html</id>
    <published>2022-10-15T20:52:00.000Z</published>
    <updated>2022-10-23T02:46:36.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-中1的枚举类型与结构体"><a href="#C-中1的枚举类型与结构体" class="headerlink" title="C#中1的枚举类型与结构体"></a>C#中1的枚举类型与结构体</h1><hr><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><ul><li><strong><em>枚举的定义</em></strong><br>  1，枚举需要定义在namespace下，这样在当前的命名空间下，所有的类（class）都可以运用该枚举型。<br>  2，默认情况下，枚举中的每个元素的基础类型都为 <strong><em>int</em></strong> 。<br>  3，如果未为枚举器列表中的元素指定值，则值将自动按1递增。<br>  4，已批准的枚举类型有 <strong><em>byte，sbyte，short，ushort，int，uint，long，ulong</em></strong><br>  4，枚举名称中不能含有空格<br>  5，枚举类型命名使用驼峰命名法</li><li><strong><em>语法：</em></strong><pre><code>* ***创建***  public enum 枚举名 &#123;...............&#125;* ***枚举的使用***   枚举类型 变量名 = 枚举类型.值</code></pre>  <strong><em>在namespace下</em></strong>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Week &#123;</span><br><span class="line"> 星期一,</span><br><span class="line"> 星期二,</span><br><span class="line"> 星期三,</span><br><span class="line"> 星期四,</span><br><span class="line"> 星期五,</span><br><span class="line"> 星期六,</span><br><span class="line"> 星期天,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <strong><em>在接口函数中</em></strong>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Week day1 = Week.星期一;</span><br><span class="line">Console.WriteLine(day1);</span><br></pre></td></tr></table></figure>  <strong><em>输出：</em></strong>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">星期一</span><br></pre></td></tr></table></figure></li></ul><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><ul><li><strong><em>结构体的定义</em></strong><br> <strong><em>结构体是复合数据类型，可定义再任意命名空间或类中，使用时在其定义域中使用。</em></strong></li><li><strong><em>特点：</em></strong><ul><li>结构体可带有方法，字段，索引，属性，运算符方法和事件。</li><li>结构体不能继承其它结构体或类。（结构体是密封的）</li><li>结构体不能作为其它结构体或类的基础结构。</li></ul></li><li><strong><em>结构体的初始化</em></strong><br> <strong><em>结构体的定义是借助struct关键字向编译器声明一种新的数据类型（改数据类型并没有分配新的存储空间，因此不能直接对解构体中的成员变量进行访问，赋值等操作，需在其被初始化后才能进行这些操作）</em></strong></li><li><strong><em>语法：</em></strong><br>  <strong><em>public struct 结构体名称 { public 数据类型  名称; ……..  }</em></strong> 这样便定义好了一个结构体。<br>  <strong><em>实例代码：</em></strong>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> MOMOeven &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">char</span> sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <strong><em>在接口函数中初始化</em></strong>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建结构体类型的变量</span></span><br><span class="line">MOMOeven momo = <span class="keyword">new</span> MOMOeven();</span><br><span class="line">momo.name = <span class="string">&quot;MOMOeven&quot;</span>;</span><br><span class="line">momo.age = <span class="number">18</span>;</span><br><span class="line">momo.sex = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;我的名字叫&#123;0&#125;我的年龄是&#123;1&#125;岁，性别是&#123;2&#125;。&quot;</span>, momo.name, momo.age, momo.sex);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-中1的枚举类型与结构体&quot;&gt;&lt;a href=&quot;#C-中1的枚举类型与结构体&quot; class=&quot;headerlink&quot; title=&quot;C#中1的枚举类型与结构体&quot;&gt;&lt;/a&gt;C#中1的枚举类型与结构体&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;枚举&quot;&gt;&lt;a href=&quot;#枚举</summary>
      
    
    
    
    
    <category term="C#学习笔记" scheme="http://example.com/tags/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C#学习(11StringBuilder)</title>
    <link href="http://example.com/posts/6c42fa85.html"/>
    <id>http://example.com/posts/6c42fa85.html</id>
    <published>2022-10-15T20:51:00.000Z</published>
    <updated>2022-10-23T02:46:36.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="string类型与StringBuilder"><a href="#string类型与StringBuilder" class="headerlink" title="string类型与StringBuilder"></a>string类型与StringBuilder</h1><ul><li><strong><em>string缺点</em></strong><ul><li>当需要对一个字符串重复赋值时，在内存中会产生大量的垃圾数据信息。</li><li>当重复赋值频率很高时，执行效率就会很低。</li></ul></li><li><strong><em>StringBulider</em></strong><ul><li>不会开辟新的空间（操作同一空间）执行效率高。</li></ul></li></ul><hr><h2 id="创建StringBuilder-变量"><a href="#创建StringBuilder-变量" class="headerlink" title="创建StringBuilder()变量"></a>创建StringBuilder()变量</h2><p><strong><em>使用StringBuilder数据类型时需要引进新的的类具体语法如下：</em></strong><br><strong><em>using System.Text;</em></strong> </p><ul><li><strong><em>创建StringBuilder变量</em></strong>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder mo = <span class="keyword">new</span> StringBuilder();</span><br></pre></td></tr></table></figure></li><li>向创建好的<strong><em>StringBuilder</em></strong> 种添加数据 <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mo.Append(<span class="string">&quot;MOMOeven&quot;</span>);</span><br><span class="line">mo.Append(<span class="number">123456</span>);</span><br><span class="line">mo.Append(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure> <strong><em>输出</em></strong> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MOMOeven123456True</span><br></pre></td></tr></table></figure><ul><li><strong><em>当然我们也能够通过循环往变量中添加数据</em></strong><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"> mo.Append(i);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><strong><em>将变量中的数据清空</em></strong>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mo.Clear();</span><br></pre></td></tr></table></figure></li></ul><h2 id="效率测试"><a href="#效率测试" class="headerlink" title="效率测试"></a>效率测试</h2><p>首先介绍 <strong><em>Stopwatch</em></strong> 类用于记录程序运行的时间<br>创建Stopwatch方法（创建秒表）<br>和StringBuilder一样需要引进新的类 <strong><em>using System.Diagnostics</em></strong><br><strong><em>语法：</em></strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Stopwatch time = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">time.Start(); <span class="comment">// 记录开始的时间</span></span><br><span class="line">time.Stop(); <span class="comment">// 记录结束的时间</span></span><br><span class="line">Console.WriteLine(time.Elapsed);  <span class="comment">// 获取执行时间  stop-start</span></span><br></pre></td></tr></table></figure><br><strong><em>实例：</em></strong><br><strong><em>比较string类型与StringBuilder类型的执行时间</em></strong><br><strong><em>string类型的运行时间：</em></strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Stopwatch num1 = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">num1.Start();</span><br><span class="line"><span class="built_in">string</span> name1 =  <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line">name +=  i;</span><br><span class="line">&#125;</span><br><span class="line">num1.Stop();</span><br><span class="line">Console.WriteLine(<span class="string">&quot;string类型的运行时间为&#123;0&#125;。&quot;</span>, num1.Elapsed);</span><br></pre></td></tr></table></figure><br><strong><em>StringBuilder的运行时间：</em></strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Stopwaatch num2 = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">num2.Start();</span><br><span class="line">StringBuilder name2 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> j=<span class="number">0</span>; j &lt; <span class="number">50000</span>; j++) &#123;</span><br><span class="line">name2.Append(j);</span><br><span class="line">&#125;</span><br><span class="line">num2.Stop();</span><br><span class="line">Console.WriteLine(<span class="string">&quot;StringBuilder类型的运行时间为&#123;0&#125;。&quot;</span>, num2.Elapsed);</span><br></pre></td></tr></table></figure></p><p><strong><em>StringBuilder类型的运行时间远远低于string类型。</em></strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;string类型与StringBuilder&quot;&gt;&lt;a href=&quot;#string类型与StringBuilder&quot; class=&quot;headerlink&quot; title=&quot;string类型与StringBuilder&quot;&gt;&lt;/a&gt;string类型与StringBuild</summary>
      
    
    
    
    
    <category term="C#学习笔记" scheme="http://example.com/tags/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C#学习(10对字符串的操作)</title>
    <link href="http://example.com/posts/6c225be7.html"/>
    <id>http://example.com/posts/6c225be7.html</id>
    <published>2022-10-15T20:50:00.000Z</published>
    <updated>2022-10-23T02:46:36.696Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-中对字符串的操作"><a href="#C-中对字符串的操作" class="headerlink" title="C#中对字符串的操作"></a>C#中对字符串的操作</h2><hr><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li><strong><em>字符串大写</em></strong>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> num = <span class="string">&quot;MOMOeven&quot;</span>;</span><br><span class="line">num = num.ToUpper();</span><br></pre></td></tr></table></figure>  <strong><em>字符串中的所有单词都将变为大写并返回。</em></strong></li><li><strong><em>字符串小写</em></strong>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   <span class="built_in">string</span> num = <span class="string">&quot;MOMOeven&quot;</span>;</span><br><span class="line">num = num.Lower();</span><br></pre></td></tr></table></figure>   <strong><em>字符串中的所有单词都转变为小写并返回。</em></strong></li><li><p><strong><em>分割字符串Split()</em></strong> </p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> num = <span class="string">&quot;nononononono&quot;</span>;</span><br><span class="line"><span class="built_in">string</span>[] Num = num.Split(<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">string</span> i <span class="keyword">in</span> Num) &#123;</span><br><span class="line">Console.WriteLine(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   <strong><em>指定一个字符放在Split方法的括号中方法将会把那个字符从字符串中去除，并返回一个string类型的数组。</em></strong></p></li><li><p><strong><em>字符串截取（按长度）</em></strong></p>   <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">string</span> String_mo = <span class="string">&quot;MOMOeven&quot;</span>;</span><br><span class="line">String_mo.Substring(<span class="number">0</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>   <strong><em>指定一个索引按照索引截取字符串，并返回截取后的字符串。</em></strong></p></li><li><strong><em>查找某个字符在字符串中第一次出现的位置</em></strong>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> name = <span class="string">&quot;MOMOeven&quot;</span>;</span><br><span class="line">name.IndexOf(<span class="string">&quot;O&quot;</span>);</span><br></pre></td></tr></table></figure>   <strong><em>返回参数字符串第一次出现的位置，返回类型int。</em></strong></li><li><strong><em>查找某个字符在字符串中最后次出现的位置</em></strong>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> name = <span class="string">&quot;MOMOeven&quot;</span>;</span><br><span class="line">name.LastIndexOf(<span class="string">&quot;O&quot;</span>);</span><br></pre></td></tr></table></figure>  <strong><em>返回参数字符串最后一次出现的位置，返回类型int。</em></strong></li><li><strong><em>判断字符串是否以什么开头</em></strong>   <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> MO = <span class="string">&quot;MOMOeven&quot;</span>;</span><br><span class="line">Console.WriteLine(MO.StartsWith(<span class="string">&quot;MO&quot;</span>));</span><br><span class="line">Console.WriteLine(MO.StartsWith(<span class="string">&quot;O&quot;</span>));</span><br></pre></td></tr></table></figure>   <strong><em>返回一个bool类型的值</em></strong></li><li><strong><em>判断字符串是否以什么结尾</em></strong>   <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> MO = <span class="string">&quot;MOMOeven&quot;</span>;</span><br><span class="line">Console.WriteLine(MO.EndsWith(<span class="string">&quot;n&quot;</span>));</span><br><span class="line">Console.WriteLine(MO.EndsWith(<span class="string">&quot;MO&quot;</span>));</span><br></pre></td></tr></table></figure>   <strong><em>返回一个bool类型的值</em></strong></li><li><strong><em>替换字符串中的某一个字符</em></strong>   <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> name = <span class="string">&quot;MOMOeven&quot;</span>;</span><br><span class="line">Console.WriteLine(name.Replace(<span class="string">&quot;even&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br></pre></td></tr></table></figure>   <strong><em>第一个参数为原字符串中想要替换的字符，第二个参数为要替换的字符，返回一个新字符。</em></strong></li><li><strong><em>判断字符串中是否包含某个字符</em></strong>   <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> MO = <span class="string">&quot;MOMOeven&quot;</span>;</span><br><span class="line">Console.WriteLine(MO.Contains(<span class="string">&quot;MO&quot;</span>));</span><br><span class="line">Console.WriteLine(MO.Contains(<span class="string">&quot;l&quot;</span>));</span><br></pre></td></tr></table></figure>   <strong><em>返回一个bool类型的值。</em></strong></li><li><strong><em>去掉字符串中前后空格Trim(), TrimStart()去掉字符串开始前空格。 TrimEnd()去掉字符串结尾时的空格。</em></strong>   <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s = <span class="string">&quot;   luan     &quot;</span>;</span><br><span class="line">Console.WriteLine(s.Trim());</span><br><span class="line">Console.WriteLine(s.TrimStart());</span><br><span class="line">Console.WriteLine(s.TrimEnd());</span><br></pre></td></tr></table></figure></li><li><strong><em>判断一个字符串是否为null</em></strong>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str = <span class="literal">null</span>;</span><br><span class="line">Console.WriteLine(<span class="built_in">string</span>.IsNullOrEmpty(str));</span><br></pre></td></tr></table></figure>   <strong><em>返回一个bool类型的值</em></strong></li></ul><h2 id="字符串的特点"><a href="#字符串的特点" class="headerlink" title="字符串的特点"></a>字符串的特点</h2><ul><li><strong><em>引用数据类型，栈空间地址指向栈空间，存储在堆空间</em></strong></li><li><strong><em>不可变（当赋值给新的变量时旧字符串没有消失，而是在空间里新开辟一个空间重新存储）</em></strong></li><li><strong><em>字符串可看做自读的字符数组（使用字符串变量下标可以获取指定字符），（也可使用for循环遍历），（字符串变量Length可获取字符数）</em></strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;C-中对字符串的操作&quot;&gt;&lt;a href=&quot;#C-中对字符串的操作&quot; class=&quot;headerlink&quot; title=&quot;C#中对字符串的操作&quot;&gt;&lt;/a&gt;C#中对字符串的操作&lt;/h2&gt;&lt;hr&gt;
&lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;hea</summary>
      
    
    
    
    
    <category term="C#学习笔记" scheme="http://example.com/tags/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C#学习(9函数)</title>
    <link href="http://example.com/posts/fd81743c.html"/>
    <id>http://example.com/posts/fd81743c.html</id>
    <published>2022-10-14T23:50:00.000Z</published>
    <updated>2022-10-23T02:46:36.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于函数的介绍"><a href="#关于函数的介绍" class="headerlink" title="关于函数的介绍"></a>关于函数的介绍</h1><hr><h2 id="入口函数介绍"><a href="#入口函数介绍" class="headerlink" title="入口函数介绍"></a>入口函数介绍</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 入口函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong><em>static：</em></strong> 是将Main方法申明为静态，是应用程序的入口。</li><li><strong><em>void：</em></strong> 说明Main方法不会返回任何内容。</li><li><strong><em>string[] args：</em></strong> 这是用来接受命令行的参数。string[] 是声明args的数据类型，可以存储字符串数组。</li><li>调用自建函数时需在接口函数中使用时才能展示出输出内容。</li></ul><h2 id="自建函数"><a href="#自建函数" class="headerlink" title="自建函数"></a>自建函数</h2><p><strong><em>自己声明一个函数</em></strong> </p><ul><li><strong><em>行参：</em></strong><br>  形式参数，在定义函数的时候，在参数列表中定义的参数。</li><li><strong><em>实参：</em></strong><br>  实际参数，在调用函数的时候，传递函数的具体参数。</li><li><strong><em>函数名</em></strong><br>  函数名首字母需要大写，且不能与关键字重名。<h3 id="自己声明第一个函数"><a href="#自己声明第一个函数" class="headerlink" title="自己声明第一个函数"></a>自己声明第一个函数</h3></li><li><strong>无参无返回值*</strong>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)     <span class="comment">// 入口函数</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 调用函数</span></span><br><span class="line">            Hello();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Hello</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <strong><em>输出</em></strong>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure></li><li><strong><em>有参无返回值</em></strong>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>  &#123;</span><br><span class="line"><span class="built_in">string</span> name = <span class="string">&quot;MOMOeven&quot;</span>;</span><br><span class="line"><span class="built_in">int</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">char</span> sex = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="comment">// 实际参数可以与行式参数名称不同</span></span><br><span class="line">    Hello(name, age, sex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Hello</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age, <span class="built_in">char</span> sex</span>)</span>&#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;你好我是&#123;0&#125;我今年&#123;1&#125;岁，我的性别是&#123;2&#125;。&quot;</span>,name, age, sex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <strong><em>输出：</em></strong>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你好我是MOMOeven我今年18岁，我的性别是男。</span><br></pre></td></tr></table></figure></li><li><strong><em>无参有返回值</em></strong><br>  static后跟代码块内将返回的值的类型，在接口函数中创建一个相同类型的变量接收它。  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>  &#123;</span><br><span class="line"><span class="built_in">int</span> num = Num();</span><br><span class="line">Console.WriteLine(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">int</span>  <span class="title">Num</span>()</span> &#123;</span><br><span class="line"><span class="built_in">int</span> num = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <strong><em>输出</em></strong>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">18</span><br></pre></td></tr></table></figure></li><li><strong><em>有参有返回值</em></strong>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>  &#123;</span><br><span class="line"><span class="built_in">string</span> name = <span class="string">&quot;MOMOeven&quot;</span>;</span><br><span class="line"><span class="built_in">int</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">char</span> sex = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">    <span class="built_in">string</span> hello = Hello(name, age, sex);</span><br><span class="line">    Console.WriteLine(hello);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Hello</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age, <span class="built_in">char</span> sex</span>)</span> &#123;</span><br><span class="line"><span class="built_in">string</span> hello;</span><br><span class="line">       hello = <span class="string">&quot;你好我是&quot;</span> + name + <span class="string">&quot;我今年&quot;</span> + age + <span class="string">&quot;岁，我的性别是&quot;</span> + sex;</span><br><span class="line">       <span class="keyword">return</span> hello;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <strong><em>输出</em></strong>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你好我是MOMOeven我今年18岁，我的性别是男</span><br></pre></td></tr></table></figure><h2 id="函数的递归操作"><a href="#函数的递归操作" class="headerlink" title="函数的递归操作"></a>函数的递归操作</h2></li><li><strong><em>什么是递归函数：</em></strong><br>  递归是指在函数定义的方法中调用自身的方法。(借助递归方法，我·们可以把一个相对复杂的问题转换成一个与原问题相似的较简单的问题来解决)  递归方法只需少量的代码就能描述出解题过程中多次重复的运算。减少了代码量，但相对的程序的运行效率会大大降低。<br><strong><em>示例</em></strong><br><strong><em>累加到num</em></strong><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> &#123;</span><br><span class="line"><span class="built_in">int</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">int</span> addnum;</span><br><span class="line">Console.WriteLine(addnum=Addnum(num));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个递归函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span>  <span class="built_in">int</span> <span class="title">Addnum</span>(<span class="params"><span class="built_in">int</span> num</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> Addnum(num - <span class="number">1</span>) + num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <strong><em>输出</em></strong> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5050</span><br></pre></td></tr></table></figure></li><li><strong><em>递归函数的特点：</em></strong> <ul><li>在函数里调用自身。</li><li>递归函数代码简洁。</li><li>递归函数会一直调用直到满足所给定的特定条件为止，我们称这个条件为递归出口。</li><li>递归函数运行效率低。</li></ul></li><li><strong><em>递归常用到的场景</em></strong><ul><li>阶乘</li><li>斐波那契数列</li><li>汉诺塔</li><li>磁盘遍历</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于函数的介绍&quot;&gt;&lt;a href=&quot;#关于函数的介绍&quot; class=&quot;headerlink&quot; title=&quot;关于函数的介绍&quot;&gt;&lt;/a&gt;关于函数的介绍&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;入口函数介绍&quot;&gt;&lt;a href=&quot;#入口函数介绍&quot; class=&quot;headerl</summary>
      
    
    
    
    
    <category term="C#学习笔记" scheme="http://example.com/tags/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C#学习(8数组内存结构)</title>
    <link href="http://example.com/posts/c313b558.html"/>
    <id>http://example.com/posts/c313b558.html</id>
    <published>2022-10-14T23:40:00.000Z</published>
    <updated>2022-10-23T02:46:36.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组的内存结构"><a href="#数组的内存结构" class="headerlink" title="数组的内存结构"></a>数组的内存结构</h1><p><strong><em>值类型与引用类型</em></strong></p><hr><h2 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h2><p><strong><em>int, float, double, bool, char</em></strong><br><strong><em>内存：</em></strong> 值类型的值存储在内存栈中<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">int</span> b = a;<span class="comment">// 值传递（拷贝一个）</span></span><br></pre></td></tr></table></figure><br>这个时候单独修改b的值时a的值并不会发生改变，这种传递叫做值传递，这个时候变量之间的传递就是拷贝一个具体的值给对方。</p><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p><strong><em>接口，数组，委托，字符串</em></strong><br><strong><em>内存：</em></strong> 引用类型的值存储在内存中的堆空间中<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[] A = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123;<span class="number">00</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>&#125;;</span><br><span class="line"><span class="built_in">int</span>[] B = A;<span class="comment">//引用传递（传递一个内存地址）</span></span><br></pre></td></tr></table></figure><br><img src="https://pic1.imgdb.cn/item/634fb73e16f2c2beb152c578.jpg" alt="栈堆"><br>这个时候单独去修改B中的值A的值会跟着发生改变，这种传递叫做引用传递(也叫浅拷贝只复制一个地址给对方)</p><div class="tip info"><p>人皆知有用之用，而莫知无用之用也。 </p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数组的内存结构&quot;&gt;&lt;a href=&quot;#数组的内存结构&quot; class=&quot;headerlink&quot; title=&quot;数组的内存结构&quot;&gt;&lt;/a&gt;数组的内存结构&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;值类型与引用类型&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id</summary>
      
    
    
    
    
    <category term="C#学习笔记" scheme="http://example.com/tags/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C#学习(7数组)</title>
    <link href="http://example.com/posts/5e28e4ca.html"/>
    <id>http://example.com/posts/5e28e4ca.html</id>
    <published>2022-10-14T23:30:00.000Z</published>
    <updated>2022-10-23T02:46:36.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><hr><div class="table-container"><table><thead><tr><th style="text-align:left">数组</th><th style="text-align:left">元素默认值</th></tr></thead><tbody><tr><td style="text-align:left">int</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">float</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">double</td><td style="text-align:left">0.0</td></tr><tr><td style="text-align:left">string</td><td style="text-align:left">null</td></tr><tr><td style="text-align:left">bool</td><td style="text-align:left">false</td></tr></tbody></table></div><h2 id="一维数组的声明与赋值与取值"><a href="#一维数组的声明与赋值与取值" class="headerlink" title="一维数组的声明与赋值与取值"></a>一维数组的声明与赋值与取值</h2><p><strong><em>一维数组的特点</em></strong></p><ul><li>在同一数组中存放的值都是同一数据类型。</li><li>所有的数组都是由连续的内存位置储存的。</li><li>数组索引从0开始。</li><li>通过数组索引能访问数组元素。<br><strong><em>语法：</em></strong><ul><li><strong><em>声明 + 初始化 ： int[]  数组名称 = new int[数组长度];</em></strong><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[] intArray = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure></li><li><strong>数组的赋值：数组名称[索引] = 加入的值;*</strong><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">intArray[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">intArray[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">intArray[<span class="number">2</span>] = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><strong><em>数组的取值：数组名称[索引]</em></strong><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(intArray[<span class="number">1</span>]);</span><br><span class="line">Console.WriteLine(intArray[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure><strong>输出：*</strong><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure></li><li><strong>声明 + 初始化 + 赋值： int[] intArray = new int[数组长度(可写可不写)] {所赋的值};*</strong><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[] intArray = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>] &#123; <span class="number">000</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>&#125;;</span><br><span class="line"><span class="comment">// 数组长度写时必须与后面大括号内的元素数量对应</span></span><br><span class="line"><span class="built_in">double</span>[] doubleArray = <span class="keyword">new</span> <span class="built_in">double</span>[] &#123; <span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span> &#125;;</span><br><span class="line"><span class="comment">// 不写时默认与元素数量一致</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong><em>使用循环赋值与取值：</em></strong></p><ul><li><strong><em>普通for循环遍历数组赋值与取值</em></strong>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span>[] doubleArray = <span class="keyword">new</span> <span class="built_in">double</span>[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> a= <span class="number">0</span>; a &lt; <span class="number">100</span>; a++)</span><br><span class="line"><span class="comment">// 将for循环中的条件作为元素存入数组中</span></span><br><span class="line">&#123;</span><br><span class="line">doubleArray[a] = a+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在利用for循环将存入的值一一展示出来</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> j= <span class="number">0</span>; j &lt; <span class="number">100</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(doubleArray[j]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong><em>加强for循环访问数组元素</em></strong>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   <span class="built_in">double</span>[] doubleArray = <span class="keyword">new</span> <span class="built_in">double</span>[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> a= <span class="number">0</span>; a &lt; <span class="number">100</span>; a++)</span><br><span class="line"><span class="comment">// 将for循环中的条件作为元素存入数组中</span></span><br><span class="line">&#123;</span><br><span class="line">doubleArray[a] = a+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 增强for循环</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">int</span> i <span class="keyword">in</span> doubleArray)</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><em>函数length：</em></strong></p><ul><li><strong><em>Length</em></strong> 函数能直接获取数组中的所有元素个数方，方便我们对数组进行操作。  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[] intArray = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123;<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; intArray.Length; i ++)</span><br><span class="line">&#123;</span><br><span class="line"> Console.WriteLine(intArray[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong><em>Length</em></strong> 函数同样适用于string类型它能获取到string类型的字符长度。</li></ul><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p><strong><em>二维数组的特点</em></strong></p><ul><li>有两个下标的数组称为二维数组。</li><li>二维数组本质上是以数组作为数组元素的数组。</li><li>创建方式基本同一维数组相同 数组类型[ , ] 数组名 = new 数组类型[ , ];<br><strong><em>语法</em></strong><ul><li><strong><em>声明 + 初始化 ： 数组类型[ , ]  数组名称 = new 数组类型[一维长度,二维长度];</em></strong><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[ , ]  int2Array = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">3</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure></li><li>声明 + 初始化 + 赋值： int[ , ] intArray = new int[一维长度,二维长度(可写可不写)] ;<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[ , ]  int2Array = <span class="keyword">new</span> <span class="built_in">int</span>[ ,  ] &#123;&#123;<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>&#125;, &#123;<span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>&#125;, &#123;<span class="number">777</span>, <span class="number">888</span>, <span class="number">999</span>&#125;&#125;;</span><br><span class="line"><span class="comment">// 此数组长度为3,3</span></span><br></pre></td></tr></table></figure><strong><em>二维数组的遍历</em></strong></li><li><strong><em>想要获取二维数组的长度得使用 GetLength(0或1)</em></strong> 函数 <strong><em>0代表一维长度1代表二维长度。</em></strong><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[ , ]  int2Array = <span class="keyword">new</span> <span class="built_in">int</span>[ ,  ] &#123;&#123;<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>&#125;, &#123;<span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>&#125;, &#123;<span class="number">777</span>, <span class="number">888</span>, <span class="number">999</span>&#125;&#125;;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;这是第一维的长度&quot;</span> + int2Array.GetLength(<span class="number">0</span>));</span><br><span class="line">Console.WriteLine(<span class="string">&quot;这是第二维的长度&quot;</span> + int2Array.GetLength(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><strong><em>输出：</em></strong><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是第一维的长度<span class="number">3</span></span><br><span class="line">这是第二维的长度<span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><strong><em>遍历二维数组</em></strong><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[ , ]  int2Array = <span class="keyword">new</span> <span class="built_in">int</span>[ ,  ] &#123;&#123;<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>&#125;, &#123;<span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>&#125;, &#123;<span class="number">777</span>, <span class="number">888</span>, <span class="number">999</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; int2Array.GetLength(<span class="number">0</span>); i++) &#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; int2Array.GetLength(<span class="number">1</span>); j++) &#123;</span><br><span class="line"> Console.WriteLine(int2Array[i, j]);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong><em>实例：</em></strong><br><strong><em>利用二维数组打印地图</em></strong><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">int</span>[ , ]  int2Array = <span class="keyword">new</span> <span class="built_in">int</span>[ ,  ] </span><br><span class="line"> &#123;</span><br><span class="line">  &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,  <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">  &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,  <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">  &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">  &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">  &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,  <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">  &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,  <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; int2Array.GetLength(<span class="number">0</span>); i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; int2Array.GetLength(<span class="number">1</span>); j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (int2Array[i,j] == <span class="number">1</span>) &#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;■&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Console.WriteLIne(<span class="string">&quot;□&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><strong><em>输出：</em></strong><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">■■■■■■■■■■■■■■■■</span><br><span class="line">■□■□□□■□□□■□□□■■</span><br><span class="line">■□■□■□■□■□■□■□■■</span><br><span class="line">■□■□■□■□■□■□■□■■</span><br><span class="line">■□□□■□□□■□□□■□□□</span><br><span class="line">■■■■■■■■■■■■■■■■</span><br></pre></td></tr></table></figure></li></ul></li></ul><div class="tip success"><p>宝剑锋从磨砺出，梅花香自苦寒来。</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h1&gt;&lt;hr&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-a</summary>
      
    
    
    
    
    <category term="C#学习笔记" scheme="http://example.com/tags/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C#学习(6循环语句)</title>
    <link href="http://example.com/posts/8a59bdcd.html"/>
    <id>http://example.com/posts/8a59bdcd.html</id>
    <published>2022-10-14T23:20:00.000Z</published>
    <updated>2022-10-23T02:46:36.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-中的循环语句"><a href="#C-中的循环语句" class="headerlink" title="C#中的循环语句"></a>C#中的循环语句</h1><hr><div class="table-container"><table><thead><tr><th style="text-align:left">循环类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">while(循环条件) {代码块}循环</td><td style="text-align:left">当给的循环条件为真时，重复执行代码块，它会在执行前判断条件真伪。</td></tr><tr><td style="text-align:left">for(循环条件) { 代码块}循环</td><td style="text-align:left">多次执行一个语句，相比于另外两种更为简便(常用)</td></tr><tr><td style="text-align:left">do…while(循环条件)</td><td style="text-align:left">在每次循环结束后判断是否继续执行下次循环，其它与while相似</td></tr></tbody></table></div><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><ul><li><strong><em>while(循环条件) {代码块}</em></strong></li><li><strong><em>先判断循环条件是否为真若为真则执行代码块中代码</em></strong><br>只要给定条件为真，C#中的while循环语句便会重复执行一个目标语句。<br><strong><em>语法：</em></strong><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(a &lt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">a++;</span><br><span class="line"><span class="comment">// a++ 相当于a = a + 1</span></span><br><span class="line"><span class="comment">// 可视为自增</span></span><br><span class="line"><span class="comment">// 执行后程序将会打印9个1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>当条件也就是a=10由于不符合循环判断式此时判断为假将不在打印1.</li></ul><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><ul><li><strong><em>for（初始表达式； 条件表达式； 增量表达式）{代码块}</em></strong></li><li><strong><em>先执行前两个表达式（初始表达式只执行一次），结束代码块后执行第三个表达式之后重复2,3表达式。直至不满足条件表达式</em></strong><br><strong><em>语法：</em></strong><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> a = <span class="number">1</span>; a &lt;= <span class="number">10</span>; a++)</span><br><span class="line"> &#123;</span><br><span class="line">       Console.WriteLine(<span class="string">&quot;你好我是&#123;0&#125;。&quot;</span>,a);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="do…-while"><a href="#do…-while" class="headerlink" title="do….while"></a>do….while</h2></li><li><strong><em>do {代码块} while(判断条件)</em></strong></li><li><strong><em>先执行代码块中的代码执行完毕后判断while中的条件若为真则继续执行do代码块中的代码直到判定条件为假为止</em></strong><br><strong><em>语法：</em></strong><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">a++;</span><br><span class="line">&#125; <span class="keyword">while</span>(a &lt; <span class="number">10</span>);</span><br><span class="line"><span class="comment">// 此次循环将会打印十次1</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="死循环"><a href="#死循环" class="headerlink" title="死循环"></a>死循环</h2><ul><li>将无限执行代码块中的代码<br><strong><em>for</em></strong> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(; ;)</span><br><span class="line">&#123;</span><br><span class="line"> Console.WriteLine(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"> <span class="comment">// 将会一直打印1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong><em>while</em></strong><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">                <span class="comment">// 同上</span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2></li><li><strong><em>实现一段限制登录次数的登录程序</em></strong> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">string</span> usename,name;</span><br><span class="line"><span class="built_in">int</span> password,password1;</span><br><span class="line">name = <span class="string">&quot;MOMOeven&quot;</span>;</span><br><span class="line">password1 = <span class="number">147258369</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         Console.Write(<span class="string">&quot;请输入账号：&quot;</span>);</span><br><span class="line">         usename = Console.ReadLine();</span><br><span class="line">         Console.Write(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">         password = Convert.ToInt32(Console.ReadLine());</span><br><span class="line">         <span class="keyword">if</span> (usename == name &amp;&amp; password == password1)</span><br><span class="line">         &#123;</span><br><span class="line">              Console.WriteLine(<span class="string">&quot;登录成功！&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> </span><br><span class="line">         &#123;</span><br><span class="line">             num--;</span><br><span class="line">             Console.WriteLine(<span class="string">&quot;登录失败请重新登录，你还剩余&#123;0&#125;次机会......\n&quot;</span>,num);</span><br><span class="line">              <span class="keyword">if</span> (num &lt;= <span class="number">0</span>)</span><br><span class="line">                 &#123;</span><br><span class="line">                 Console.WriteLine(<span class="string">&quot;密码或账号错误次数过多！退出登录！&quot;</span>);</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li></ul><div class="tip bolt"><p>春江潮水连海平，海上明月共潮生。 </p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-中的循环语句&quot;&gt;&lt;a href=&quot;#C-中的循环语句&quot; class=&quot;headerlink&quot; title=&quot;C#中的循环语句&quot;&gt;&lt;/a&gt;C#中的循环语句&lt;/h1&gt;&lt;hr&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead</summary>
      
    
    
    
    
    <category term="C#学习笔记" scheme="http://example.com/tags/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C#学习(5判断语句)</title>
    <link href="http://example.com/posts/e5a5acde.html"/>
    <id>http://example.com/posts/e5a5acde.html</id>
    <published>2022-10-14T23:10:00.000Z</published>
    <updated>2022-10-23T02:46:36.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-中的判断语句"><a href="#C-中的判断语句" class="headerlink" title="C#中的判断语句"></a>C#中的判断语句</h1><hr><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p>一个 <strong><em>if</em></strong> 语句由一个布尔表达式后跟一个或多个语句组成。<br><strong><em>语法：</em></strong><br> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (判断条件)</span><br><span class="line">&#123;</span><br><span class="line">要执行的代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong><em>描述：</em></strong><br>判断条件：一般为关系表达式或布尔类型。<br>执行过程：程序运行到<strong><em>if</em></strong>处，所先判断<strong><em>if</em></strong>所带的小括号中的判断条件。如果条件成立返回true，执行if大括号中的代码，如果条件没成立则返回false跳过大括号中的代码，继续向下执行。<br><strong><em>特点：</em></strong><br>先判断在执行，有可能一条代码也不执行。用于一种情况的判断。<br><strong><em>（适用于一些分支判断，常用）</em></strong> </p><h2 id="if-…-……-else-if-…-语句"><a href="#if-…-……-else-if-…-语句" class="headerlink" title="if() { …. }…….else if() { …. }语句"></a>if() { …. }…….else if() { …. }语句</h2><p><strong><em>if() { …. }…else if() { …. }</em></strong> 语句这是<strong><em>if</em></strong>语句的嵌入升级版能同时判断多个选项，与if语句的使用基本相同。</p><ul><li>实例<br>判断学生的分数等级<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 输入学生成绩</span></span><br><span class="line"> <span class="built_in">double</span> achevement;</span><br><span class="line"> Console.Write(<span class="string">&quot;请输入你的分数： &quot;</span>);</span><br><span class="line"> achevement = Convert.ToDouble(Console.ReadLine());</span><br><span class="line"> <span class="comment">// 判断成绩</span></span><br><span class="line"> <span class="keyword">if</span> (achevement &gt; <span class="number">90</span> &amp;&amp; achevement &lt;= <span class="number">100</span>)</span><br><span class="line"> &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;你的成绩为优秀！&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (achevement &gt; <span class="number">70</span> &amp;&amp; achevement &lt;= <span class="number">90</span>)</span><br><span class="line"> &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;你的成绩海星。&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (achevement &gt; <span class="number">0</span> &amp;&amp; achevement &lt;= <span class="number">70</span>)</span><br><span class="line">&#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;继续努力！&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;输入错误。&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><strong><em>输出：</em></strong><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请输入你的分数： 12</span><br><span class="line">继续努力</span><br></pre></td></tr></table></figure>最后的<strong><em>else</em></strong>没有携带大括号可看做if为true<br>  <strong><em>（if语句除特殊状况外都是按从上到下执行遇到为true的if语句后便执行其中代码不在继续执行下方判断语句但依旧会执行其它代码）</em></strong></li></ul><h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><ul><li><strong><em>switch</em></strong>语句中的<strong><em>expression</em></strong>必须是一个整型或枚举型 <strong><em>(以后会提到)</em></strong>，或是一个<strong><em>class</em></strong>类型 <strong><em>(以后着重)</em></strong> ，其中<strong><em>class</em></strong>有一个单一的转换函数将其转换为整型或枚举型。<br><strong><em>语法：</em></strong><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> num=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">switch</span>(num)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">  <span class="comment">// ...输出代码</span></span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">  <span class="comment">// ...输出代码</span></span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"> <span class="literal">default</span>:</span><br><span class="line">  <span class="comment">// ...视为if中的else</span></span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在一个switch中可以有任意数量的case语句。每个case后跟一个要比较的值和冒号。</li><li>case的constant-expression必须与switch中的变量具有相同的数据类型，且必须是一个常量。</li><li>当测试的变量等于case中的常量时，case后跟的语句将被执行。直到遇到break为止 <strong><em>（break为控制流程的函数它能将程序强制结束）</em></strong> </li><li>当遇到break时，switch终止，控制流将跳到switch语句的下一行。</li><li>case语句不一定要包含break，如果case中没有语句，则可以不包含break.</li><li>switch有一个可选default出现在switch结尾，default可为所有case都不为真时执行的一个任务default中的break不是必须的。</li><li>C#中不支持一个case标签显示贯穿到另一个case标签。<h2 id="控制流程语句"><a href="#控制流程语句" class="headerlink" title="控制流程语句"></a>控制流程语句</h2></li><li>终止语句break<br> break语句主要用于结束当前程序将它放到程序中程序将会运行到截止它出现的那行代码为止 <strong><em>（常用语控制循环与判断）</em></strong></li><li>跳出语句continue<br> continue勇于提前结束一段循环，有时希望提前结束这段循环而不希望它停下来时就使用continue。<strong><em>（下章将介绍到循环）</em></strong></li><li><strong><em>goto语句</em></strong><br> goto语句用法相当灵活，goto语句主要用于跳转影响程序的执行流程<br> 用它能实现循环，递归选择等功能。使用起来相当方便。<br> <strong><em>语法：</em></strong><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">goto</span> cc;</span><br><span class="line">i = <span class="number">9</span>;</span><br><span class="line">cc: Console.WriteLine(i);</span><br></pre></td></tr></table></figure> <strong><em>输出：</em></strong>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure> 使用goto定义一个跳转标签，再在需要执行的语句前加上这个跳转标签如上，在代码运行到你定义的跳转标签时便会直接跳转到前面有跳转标签的语句，此时中间的代码将不在被执行。</li></ul><div class="tip success"><p>日日行，不怕千万里。常常做，不怕千万事。</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-中的判断语句&quot;&gt;&lt;a href=&quot;#C-中的判断语句&quot; class=&quot;headerlink&quot; title=&quot;C#中的判断语句&quot;&gt;&lt;/a&gt;C#中的判断语句&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;if语句&quot;&gt;&lt;a href=&quot;#if语句&quot; class=&quot;headerl</summary>
      
    
    
    
    
    <category term="C#学习笔记" scheme="http://example.com/tags/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C#学习(4输入)</title>
    <link href="http://example.com/posts/63f12da7.html"/>
    <id>http://example.com/posts/63f12da7.html</id>
    <published>2022-10-14T23:00:00.000Z</published>
    <updated>2022-10-23T02:46:36.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-中用户的输入"><a href="#C-中用户的输入" class="headerlink" title="C#中用户的输入"></a>C#中用户的输入</h1><hr><h2 id="C-中用户的输入-1"><a href="#C-中用户的输入-1" class="headerlink" title="C#中用户的输入"></a>C#中用户的输入</h2><ul><li><p>在C#中用户 输入所用函数为 <strong><em>Console.ReadLine();</em></strong> （读取用户输入的字符返回并接受一个 <strong><em>string</em></strong> 类型的数据）</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str ;</span><br><span class="line">str = Console.ReadLine();</span><br><span class="line">Console.WriteLine(str);</span><br></pre></td></tr></table></figure><p> 此方法只能返回string类型的数据如果需要接受其它类型的数据需对接收到的数据进行转换。</p></li><li><p>C#中用户输入后对数据进行按需转换<br>  1， <strong><em>Console.Read();</em></strong>  此方法接收并返回一个 <strong><em>char</em></strong> 类型的数据在使用时如果输入字符串那么它将遵循 <strong><em>ascll</em></strong> 码的转换原则返回输入的字符串中第一个字符的 <strong><em>ascll</em></strong> 码。<br>  <img src="https://pic1.imgdb.cn/item/634d12ee16f2c2beb1f319d2.jpg" alt="图片"></p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> num;</span><br><span class="line">   num = Console.Read();</span><br><span class="line">   Console.WriteLine(num);</span><br></pre></td></tr></table></figure><p>  <strong><em>输出：</em></strong> </p>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">97</span><br></pre></td></tr></table></figure><p>  2, <strong><em>Convert</em></strong> 函数是数据类型转换中最灵活的方法它能将任意数据类型的值转换成任意数据类型。(不能超过指定范围)<br>  语法如下：<br>  <strong><em>数据类型    变量名   =   Convert.To数据类型(变量名);</em></strong><br>  <strong><em>数据类型</em></strong>   </p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Convert.ToInt16()</td><td style="text-align:left">转换为整型(short)</td></tr><tr><td style="text-align:left">Convert.ToInt32()</td><td style="text-align:left">转换为整型(int)</td></tr><tr><td style="text-align:left">Convert.ToInt64()</td><td style="text-align:left">转换为整型(long)</td></tr><tr><td style="text-align:left">Convert.ToChar()</td><td style="text-align:left">转换为字符型(char)</td></tr><tr><td style="text-align:left">Convert.ToString()</td><td style="text-align:left">转换为字符串类型(string)</td></tr><tr><td style="text-align:left">Convert.ToDateTime()</td><td style="text-align:left">转换为日期型datetime)</td></tr><tr><td style="text-align:left">Convert.ToDouble()</td><td style="text-align:left">转换为布尔型(double)</td></tr><tr><td style="text-align:left">Convert.ToSingle()</td><td style="text-align:left">转换为单精度浮点型(float)</td></tr></tbody></table></div> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> num1,num2;</span><br><span class="line">Console.Write(<span class="string">&quot;请输入第一个加数：&quot;</span>);</span><br><span class="line">num1 = Convert.ToInt32(Console.ReadLine());</span><br><span class="line">Console.Write(<span class="string">&quot;请输入第二个加数：&quot;</span>);</span><br><span class="line">num2 = Convert.ToInt32(Console.ReadLine());</span><br><span class="line"><span class="comment">// 将原本应为string类型的输入数据转化为int型并用num1，num2将其接收</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;&#123;0&#125;  +  &#123;1&#125;  =   &#123;2&#125;&quot;</span>, num1, num2, num1+num2);</span><br></pre></td></tr></table></figure><p> <strong><em>输出：</em></strong><br> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入第一个加数：32</span><br><span class="line">请输入第二个加数：23</span><br><span class="line">32  +  23  =   55</span><br></pre></td></tr></table></figure></p><div class="tip key"><p>千里之行始于足下</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-中用户的输入&quot;&gt;&lt;a href=&quot;#C-中用户的输入&quot; class=&quot;headerlink&quot; title=&quot;C#中用户的输入&quot;&gt;&lt;/a&gt;C#中用户的输入&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;C-中用户的输入-1&quot;&gt;&lt;a href=&quot;#C-中用户的输入-1&quot; cl</summary>
      
    
    
    
    
    <category term="C#学习笔记" scheme="http://example.com/tags/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C#学习(3运算与逻辑符)</title>
    <link href="http://example.com/posts/903ab615.html"/>
    <id>http://example.com/posts/903ab615.html</id>
    <published>2022-10-14T22:00:00.000Z</published>
    <updated>2022-10-23T02:46:36.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-中的算术运算符及逻辑运算符"><a href="#C-中的算术运算符及逻辑运算符" class="headerlink" title="C#中的算术运算符及逻辑运算符"></a>C#中的算术运算符及逻辑运算符</h1><hr><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>在C#中有五个算术运算符分别是: + , - ,  * ，/ , %<br>(他们分别代表数学中的加， 减， 乘， 除，取余)</p><ul><li>二元运算符<br> <strong><em>要求：</em></strong> 要求参与的两个操作数据类型必须相同，并且经过运算后结果也与操作的数据类型相同(特殊情况，自动转换除外)<br> <strong><em>规则：</em></strong> 二元运算的规则与数学中的运算相同若要改变其优先级只需加上小括号便可。</li><li>二元运算中的转换<br> <strong><em>隐式转换：</em></strong> 同一类型之间的转换，一般由高向低转换，且转换过程中不带类型修饰符。<br> 例如： <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a  = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">float</span> b = <span class="number">10</span>/a;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;转换后的值为&#123;0&#125;。&quot;</span>, b);</span><br></pre></td></tr></table></figure> 输出：<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">转换后的值为3</span><br></pre></td></tr></table></figure> <strong><em>强制转换：</em></strong> 不同类型间可以转换，转换过程中必须带类型修饰符，数据类型一定要相兼容。 <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span> a = <span class="number">3.1415925</span>;</span><br><span class="line"><span class="built_in">int</span> b = (<span class="built_in">int</span>)a;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;转换后的值为&#123;0&#125;。&quot;</span>, b);</span><br></pre></td></tr></table></figure> 输出： <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">转换后的值为3</span><br></pre></td></tr></table></figure> 语句转换： <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span> a = <span class="number">10.224</span>;</span><br><span class="line">a = Convert.ToInt32(a);</span><br><span class="line"><span class="comment">// 此时的a属于int类型</span></span><br><span class="line">a = Convert.ToString(a);</span><br><span class="line"><span class="comment">// 此时的a被转化为了string型。(一切类型都可转换为string类型)</span></span><br></pre></td></tr></table></figure></li><li>二元运算中赋值时的空间操作<br>  在进行转换时会在栈空间内重新申请一块内存区域存放转换后的值此时若未对转换后的值重新赋值将会输出未转换前的值。<br>  <strong><em>（此时的a1与a在栈空间同时享用一块内存区域）</em></strong>   <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span> a1;</span><br><span class="line"><span class="built_in">double</span> a = <span class="number">10.222</span>;</span><br><span class="line">a1 = a;</span><br><span class="line">Console.WriteLine(a);</span><br><span class="line">Console.WriteLine(a1);</span><br><span class="line"><span class="comment">// 此时a1,a2输出的都为为10.222</span></span><br></pre></td></tr></table></figure> 当a被重新赋值时<br> <strong><em>（此时a被重新赋值后系统会在栈空间重新申请一块内存区域存放a，此时a，a1不在共享一块内存区域）</em></strong>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span> a1;</span><br><span class="line"><span class="built_in">double</span> a = <span class="number">10.222</span>;</span><br><span class="line">a1 = a;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">Console.WriteLine(a);</span><br><span class="line">Console.WriteLine(a1);</span><br><span class="line"><span class="comment">// 此时a输出的为10</span></span><br><span class="line"><span class="comment">// a1输出的为10.222</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><ul><li>整体逻辑运算符<br>  “&amp;”，“|”，“^”（按位与，按位或，按位异或）它们允许在两个数值上进行布尔运算。</li><li>条件逻辑运算符<br>  “&amp;&amp;”，“||”，“！”（与，或，非）运算符的两边操作数值必须为布尔类型，操作数常为条件表达式。</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">!=</td><td style="text-align:left">比较两个值是否不等(如果不等返回true否则返回false)</td></tr><tr><td style="text-align:center">==</td><td style="text-align:left">比较两个数是否相等(如果相等返回true否则返回false)</td></tr><tr><td style="text-align:center">&amp;</td><td style="text-align:left">产生两个操作数的按位与</td></tr><tr><td style="text-align:center">&amp;&amp;</td><td style="text-align:left">布尔 与：当两个操作数都为真时结果为true其余情况为false</td></tr><tr><td style="text-align:center">&#124;</td><td style="text-align:left">产生两个操作数的按位或</td></tr><tr><td style="text-align:center">&#124;&#124;</td><td style="text-align:left">布尔 或：当两个操作数至少一个为真时结果为true其余情况为false</td></tr><tr><td style="text-align:center">^</td><td style="text-align:left">产生两个操作数的按位异或</td></tr><tr><td style="text-align:center">！</td><td style="text-align:left">条件 非： 对布尔类型操作数结果取反</td></tr></tbody></table></div><p><strong><em>注意</em></strong><br>1，&amp;是可以进行数值的按位与，&amp;&amp;只能进行布尔值的逻辑运算。<br>2，|是可以进行数值的按位或，||只能进行布尔值的逻辑运算。<br>3，优先级，由低到高：== , !=  <strong>&lt;</strong> &amp; <strong><em>&lt;</em></strong> ^ <strong><em>&lt;</em></strong> | <strong><em>&lt;</em></strong> &amp;&amp; <strong><em>&lt;</em></strong> || </p><h2 id="C-中的占位符"><a href="#C-中的占位符" class="headerlink" title="C#中的占位符"></a>C#中的占位符</h2><ul><li>连接占位符<br>   在C#中变量可用 <strong><em>+</em></strong> 让其与所要输出的语句连接起来(不用区分左右类型)<br>   具体语法：   <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> num = <span class="number">16</span>;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;李华今年&quot;</span> + num + <span class="string">&quot;岁。&quot;</span>);</span><br></pre></td></tr></table></figure></li><li>数字占位符<pre><code>此占位符在输出语句中以 ***&#123;数字&#125;*** 后逗号跟变量。大括号中的数字对应逗号后的变量。(大括号中的数字从0开始)具体语法：</code></pre>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> num = <span class="number">16</span>;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;李华今年&#123;0&#125;岁。&quot;</span>, num)</span><br></pre></td></tr></table></figure><div class="tip info"><p>海不辞水，故能成其大。山不辞石，故能成其高。 </p></div></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-中的算术运算符及逻辑运算符&quot;&gt;&lt;a href=&quot;#C-中的算术运算符及逻辑运算符&quot; class=&quot;headerlink&quot; title=&quot;C#中的算术运算符及逻辑运算符&quot;&gt;&lt;/a&gt;C#中的算术运算符及逻辑运算符&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;算术运算符&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="C#学习笔记" scheme="http://example.com/tags/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C#学习(2数据类型与转义符)</title>
    <link href="http://example.com/posts/1ca22505.html"/>
    <id>http://example.com/posts/1ca22505.html</id>
    <published>2022-10-14T21:00:00.000Z</published>
    <updated>2022-10-23T02:46:36.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-中的数据类型与转义符"><a href="#C-中的数据类型与转义符" class="headerlink" title="C#中的数据类型与转义符"></a>C#中的数据类型与转义符</h1><hr><h2 id="C-中的基本数据类型"><a href="#C-中的基本数据类型" class="headerlink" title="C#中的基本数据类型"></a>C#中的基本数据类型</h2><p>C#中的数据类型分两大类分别是值类型和引用类型  </p><p><strong><em>值类型分为：</em></strong> 整型，浮点型，字符型，布尔型，枚举型等等。<br>(值类型存储在数据栈中， <strong><em>存放那个值所占用的内存空间大小</em></strong>)</p><p><strong><em>引用类型分为：</em></strong> 接口，数组，委托，字符串等。<br>(引用类型存储在数据堆中， <strong><em>存放那个数值的空间地址</em></strong>)  </p><ul><li>整型（int）<br>用来存储整数，按照取值范围又将整型分为几个类型，分别是byte类型，shot类型，int类型，long类型且还分别定义了有符号和无符号。有符号代表可以定义0以下的值（也就是负数）而无符号只能定义0和0以上的值。  </li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:center">占用字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">有无符号</th></tr></thead><tbody><tr><td style="text-align:left">sbyte</td><td style="text-align:center">1字节</td><td style="text-align:center">-2<sup>7</sup>~2<sup>7</sup>-1</td><td style="text-align:center">有符号</td></tr><tr><td style="text-align:left">byte</td><td style="text-align:center">1字节</td><td style="text-align:center">0~2<sup>8</sup>-1</td><td style="text-align:center">无符号</td></tr><tr><td style="text-align:left">shot</td><td style="text-align:center">2字节</td><td style="text-align:center">-2<sup>15</sup>~2<sup>15</sup>-1</td><td style="text-align:center">有符号</td></tr><tr><td style="text-align:left">ushot</td><td style="text-align:center">2字节</td><td style="text-align:center">0~2<sup>16</sup>-1</td><td style="text-align:center">无符号</td></tr><tr><td style="text-align:left">int</td><td style="text-align:center">4字节</td><td style="text-align:center">-2<sup>31</sup>~2<sup>31</sup>-1</td><td style="text-align:center">有符号</td></tr><tr><td style="text-align:left">uint</td><td style="text-align:center">4字节</td><td style="text-align:center">0~2<sup>32</sup>-1</td><td style="text-align:center">无符号</td></tr><tr><td style="text-align:left">long</td><td style="text-align:center">8字节</td><td style="text-align:center">-2<sup>63</sup>~2<sup>63</sup>-1</td><td style="text-align:center">有符号</td></tr><tr><td style="text-align:left">ulong</td><td style="text-align:center">8字节</td><td style="text-align:center">0~2<sup>64</sup>-1</td><td style="text-align:center">无符号</td></tr></tbody></table></div><ul><li>浮点型（float或double）<br>浮点型用来存储小数，浮点型分为两类分别是 <strong><em>单精度浮点型</em></strong> 和 <strong><em>双精度浮点型</em></strong>   在C#中默认的浮点型是 <strong>double</strong> 如果需要使用 <strong>float</strong> 则需要在小数后面加上F或f。（例如3.14f，3.14F）</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:center">占用字节</th><th style="text-align:center">取值范围</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:left">float</td><td style="text-align:center">4字节</td><td style="text-align:center">最多保留7位小数</td><td style="text-align:center">单精度浮点型</td></tr><tr><td style="text-align:left">double</td><td style="text-align:center">8字节</td><td style="text-align:center">最多保留14位小数</td><td style="text-align:center">双精度浮点型</td></tr></tbody></table></div><ul><li><p>字符型（char）<br>字符类型使用char关键字来表示，它占用两个字符能存储一个汉字，字母，或符号使用char类型时需要用单引号括起。（’乱’，’a’,’/‘等）  </p></li><li><p>布尔类型（bool）<br>bool类型用bool来声明，它只有两个值 <strong><em>true</em></strong> 或 <strong><em>false</em></strong> 这两个值经常用来判断 成立或不成立。</p></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sbyte</span> mo = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">sbyte</span> mo_ = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">byte</span> mo2 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">shot mo3 = <span class="number">-1</span>;</span><br><span class="line">shot mo3_ = <span class="number">1</span>;</span><br><span class="line">ushot mo4 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> mo5 = <span class="number">-1234</span>;</span><br><span class="line"><span class="built_in">int</span> mo5_ = <span class="number">1234</span>;</span><br><span class="line"><span class="built_in">uint</span> mo6 = <span class="number">1234</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">long</span> mo7 = <span class="number">-1234567</span>;</span><br><span class="line"><span class="built_in">long</span> mo7_ = <span class="number">1234567</span>;</span><br><span class="line"><span class="built_in">ulong</span> mo8 = <span class="number">1234567</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">double</span> mo9 = <span class="number">1.2424</span>;</span><br><span class="line"><span class="built_in">float</span> mo10 = <span class="number">1.244f</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">char</span> mo11 = <span class="string">&#x27;M&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> mo12 = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">bool</span> mo13 = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h2 id="C-中的转义符"><a href="#C-中的转义符" class="headerlink" title="C#中的转义符"></a>C#中的转义符</h2><p>转义符的作用就是输出这个特殊含义的字符，转义字符的使用用方式非常简单，常用转义符如下。  </p><div class="table-container"><table><thead><tr><th style="text-align:left">转义字符</th><th style="text-align:center">等价字符</th></tr></thead><tbody><tr><td style="text-align:left">\’</td><td style="text-align:center">单引号</td></tr><tr><td style="text-align:left">\”</td><td style="text-align:center">双引号</td></tr><tr><td style="text-align:left">\</td><td style="text-align:center">反斜杠</td></tr><tr><td style="text-align:left">\0</td><td style="text-align:center">空</td></tr><tr><td style="text-align:left">\a</td><td style="text-align:center">警告(产生一声”叮”)</td></tr><tr><td style="text-align:left">\b</td><td style="text-align:center">退格</td></tr><tr><td style="text-align:left">\f</td><td style="text-align:center">换页</td></tr><tr><td style="text-align:left">\n</td><td style="text-align:center">换行</td></tr><tr><td style="text-align:left">\r</td><td style="text-align:center">回车</td></tr><tr><td style="text-align:left">\t</td><td style="text-align:center">水平制表符</td></tr><tr><td style="text-align:left">\v</td><td style="text-align:center">垂直制表符</td></tr></tbody></table></div><div class="tip ban"><p>醉后不知天在水，满船清梦压星河。</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-中的数据类型与转义符&quot;&gt;&lt;a href=&quot;#C-中的数据类型与转义符&quot; class=&quot;headerlink&quot; title=&quot;C#中的数据类型与转义符&quot;&gt;&lt;/a&gt;C#中的数据类型与转义符&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;C-中的基本数据类型&quot;&gt;&lt;a href=</summary>
      
    
    
    
    
    <category term="C#学习笔记" scheme="http://example.com/tags/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C#学习(1结构语法注释)</title>
    <link href="http://example.com/posts/632c776a.html"/>
    <id>http://example.com/posts/632c776a.html</id>
    <published>2022-10-14T20:00:00.000Z</published>
    <updated>2022-10-23T02:46:36.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识C"><a href="#初识C" class="headerlink" title="初识C"></a>初识C</h1><hr><h2 id="C-程序的结构"><a href="#C-程序的结构" class="headerlink" title="C#程序的结构"></a>C#程序的结构</h2><p> 一个C#程序要包括以下几个部分  </p><ul><li>命名空间声明(Namespace declaration)  </li><li>一个Class方法</li><li>Class 方法</li><li>Class 属性  </li><li>一个Main方法</li><li>语句(Statements) &amp; 表达式(Expressions)</li><li>注释  </li></ul><p>代码块</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">filename</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">HelloWorld</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="comment">// Console: 控制台</span></span><br><span class="line">           <span class="comment">// WriteLine: 写入一行</span></span><br><span class="line">           <span class="comment">// 作用： 控制台中打印一行</span></span><br><span class="line">           Console.WriteLine(<span class="string">&quot;Hello  World!&quot;</span>);</span><br><span class="line">           <span class="comment">// ReadKey: 读取一个键</span></span><br><span class="line">           <span class="comment">// 作用： 不让窗口闪过等待用户按下下一个按键</span></span><br><span class="line">           COnsole.ReadKey();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><ul><li>第一行 <strong><em>using System;</em></strong> using关键字用于程序中包含System的命名空间。</li><li><strong><em>namespace</em></strong> 是一个声明， 一个namespac里面包含一系列的类filename命名空间包含了HelloWorld类。</li><li><strong><em>class</em></strong> 声明。类HelloWorld包含了程序使用的数据和方法声明。类一般包含了多个方法，方法定义了类的行为，在上面代码中只有一个Main方法。</li><li><strong><em>Main</em></strong> 方法， 是所有C#程序的入口点。</li></ul><p>C#程序是对大小写敏感的</p><ul><li>所有的语句和表达式必须以分号 <strong><em>;</em></strong> 结尾。</li><li>程序的执行从 <strong><em>Main</em></strong> 方法开始。</li><li>名称一般使用首字母大写。</li></ul><h2 id="C-基本语法"><a href="#C-基本语法" class="headerlink" title="C#基本语法"></a>C#基本语法</h2><p>C# 是一种面向对象的编程语言。在面向对象的程序设计方法中，程序由各种相互交互的对象组成，相同种类的对象通常具有相同的类型，或者说在相同的class中。</p><p>以立方体为例它具有长，宽，高属性。根据特性它可以接受这些属性值，计算面积和体积。 </p><p>下面就来看看C#的基本语法 </p><p>代码  </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Filename</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Cube</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">double</span> length;</span><br><span class="line">        <span class="built_in">double</span> width;</span><br><span class="line">        <span class="built_in">double</span> height;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Accepdetails</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            length = <span class="number">5.5</span>;</span><br><span class="line">            width = <span class="number">4.5</span>;</span><br><span class="line">            height = <span class="number">3.5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 计算表面积并返回</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetAree</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> length*width*<span class="number">2</span> + height*width*<span class="number">2</span> + height*length*<span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 计算体积积并返回</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">GetArea</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> length*width*height</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 控制台输出</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;长宽高分别是&#123;0&#125;，&#123;1&#125;，&#123;2&#125;。&quot;</span>,length,width,height);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;表面积是&#123;0&#125;体积是&#123;1&#125;。&quot;</span>,GerAree(),GetArea());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">MOMOeven</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// new一个对象</span></span><br><span class="line">            Cube s = <span class="keyword">new</span> Cube();</span><br><span class="line">            s.GetAree();</span><br><span class="line">            s.GetArea();</span><br><span class="line">            s.Display();</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果  </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">长宽高分别是5.5，4.5，3.5。</span><br><span class="line">表面积是119.5体积是86.625。</span><br></pre></td></tr></table></figure><h2 id="C-中的基本注释"><a href="#C-中的基本注释" class="headerlink" title="C#中的基本注释"></a>C#中的基本注释</h2><ul><li>单行注释  </li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注释类容 </span></span><br></pre></td></tr></table></figure><ul><li>多行注释  </li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注释类容（可跨行注释） */</span></span><br></pre></td></tr></table></figure><div class="tip info"><p>没有一蹴而就的成功，也没有一如既往地失败。 </p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初识C&quot;&gt;&lt;a href=&quot;#初识C&quot; class=&quot;headerlink&quot; title=&quot;初识C&quot;&gt;&lt;/a&gt;初识C&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;C-程序的结构&quot;&gt;&lt;a href=&quot;#C-程序的结构&quot; class=&quot;headerlink&quot; title=&quot;C#</summary>
      
    
    
    
    
    <category term="C#学习笔记" scheme="http://example.com/tags/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C#脚本关于事件及获取</title>
    <link href="http://example.com/posts/aacb2b8c.html"/>
    <id>http://example.com/posts/aacb2b8c.html</id>
    <published>2022-10-02T22:00:00.000Z</published>
    <updated>2022-10-23T02:46:36.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 鼠标点击</span></span><br><span class="line">        <span class="comment">// 按下鼠标触发事件</span></span><br><span class="line">        <span class="keyword">if</span> (Input.GetMouseButtonDown(<span class="number">0</span>)) &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;按下鼠标左键&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 持续按下鼠标</span></span><br><span class="line">        <span class="keyword">if</span> (Input.GetMouseButton(<span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;持续按下鼠标左键&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 抬起鼠标</span></span><br><span class="line">        <span class="keyword">if</span> (Input.GetMouseButtonUp(<span class="number">0</span>)) &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;抬起鼠标左键&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 按下键盘按键</span></span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.A)) &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;按下了A键&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 持续按下A</span></span><br><span class="line">        <span class="keyword">if</span> (Input.GetKey(KeyCode.A))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;持续按下了A键&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 抬起按键</span></span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyUp(KeyCode.A))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;松开了A键&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h1><ul><li><p>获取属性</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//  获取位置</span></span><br><span class="line">        Debug.Log(transform.position);</span><br><span class="line">        Debug.Log(transform.localEulerAngles);</span><br><span class="line">        <span class="comment">// 获取旋转</span></span><br><span class="line">        Debug.Log(transform.rotation);</span><br><span class="line">        Debug.Log(transform.localPosition);</span><br><span class="line">        Debug.Log(transform.eulerAngles);</span><br><span class="line">        Debug.Log(transform.localEulerAngles);</span><br><span class="line">        <span class="comment">// 获取缩放 </span></span><br><span class="line">        Debug.Log(transform.localScale);</span><br><span class="line">        <span class="comment">// 向量</span></span><br><span class="line">        Debug.Log(transform.forward);</span><br><span class="line">        Debug.Log(transform.right);</span><br><span class="line">        Debug.Log(transform.up);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 父子关系</span></span><br><span class="line">        <span class="comment">// 获取父物体</span></span><br><span class="line">        <span class="comment">//transform.parent.gameObject</span></span><br><span class="line">        <span class="comment">// 获取子物体</span></span><br><span class="line">        Debug.Log(transform.childCount);</span><br><span class="line">        <span class="comment">// 解除父子关系(父向子)</span></span><br><span class="line">        transform.DetachChildren();</span><br><span class="line">        <span class="comment">// 获取子物体</span></span><br><span class="line">        Transform trans = transform.Find(<span class="string">&quot;Child&quot;</span>);</span><br><span class="line">        trans = transform.GetChild(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 判断一个物体是否是另一个物体的子物体</span></span><br><span class="line">        <span class="built_in">bool</span> res = trans.IsChildOf(transform);</span><br><span class="line">        Debug.Log(res);</span><br><span class="line">        <span class="comment">// 设置父物体</span></span><br><span class="line">        trans.SetParent(transform);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>移动及状态</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 时刻看向000点</span></span><br><span class="line">        transform.LookAt(Vector3.zero);</span><br><span class="line">        <span class="comment">// 旋转</span></span><br><span class="line">        transform.Rotate(Vector3.up, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 绕某个物体旋转</span></span><br><span class="line">        transform.RotateAround(Vector3.zero, Vector3.up, <span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 移动</span></span><br><span class="line">        transform.Translate(Vector3.forward * <span class="number">0.1f</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div class="tip error"><p>error</p></div></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;事件&quot;&gt;&lt;a href=&quot;#事件&quot; class=&quot;headerlink&quot; title=&quot;事件&quot;&gt;&lt;/a&gt;事件&lt;/h1&gt;&lt;figure class=&quot;highlight c#&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla</summary>
      
    
    
    
    
    <category term="unity&amp;C#学习笔记" scheme="http://example.com/tags/unity-C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C#脚本关于场景&amp;协程</title>
    <link href="http://example.com/posts/b485a69.html"/>
    <id>http://example.com/posts/b485a69.html</id>
    <published>2022-10-01T23:00:00.000Z</published>
    <updated>2022-10-23T02:46:36.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="场景类与场景管理类"><a href="#场景类与场景管理类" class="headerlink" title="场景类与场景管理类"></a>场景类与场景管理类</h1><p> <strong><em>使用场景内前需导入模块using UnityEngine.SceneManagement;</em></strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 两个类 场景类 场景管理类</span></span><br><span class="line">        <span class="comment">//SceneManager.LoadScene(1);</span></span><br><span class="line">        <span class="comment">// 获取当前场景</span></span><br><span class="line">        Scene scene = SceneManager.GetActiveScene();</span><br><span class="line">        <span class="comment">// 场景名称</span></span><br><span class="line">        Debug.Log(scene.name);</span><br><span class="line">        <span class="comment">// 场景是否已被加载</span></span><br><span class="line">        Debug.Log(scene.isLoaded);</span><br><span class="line">        <span class="comment">// 场景路径</span></span><br><span class="line">        Debug.Log(scene.path);</span><br><span class="line">        <span class="comment">// 场景索引</span></span><br><span class="line">        Debug.Log(scene.buildIndex);</span><br><span class="line">        GameObject[] gos = scene.GetRootGameObjects();</span><br><span class="line">        Debug.Log(gos.Length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 场景管理类</span></span><br><span class="line">        <span class="comment">// 已加载场景个数</span></span><br><span class="line">        Debug.Log(SceneManager.sceneCount);</span><br><span class="line">        <span class="comment">// 创建场景</span></span><br><span class="line">        Scene newScene =  SceneManager.CreateScene(<span class="string">&quot;newScene&quot;</span>);</span><br><span class="line">        <span class="comment">// 卸载场景</span></span><br><span class="line">        SceneManager.UnloadSceneAsync(newScene);</span><br><span class="line">        <span class="comment">// 加载场景</span></span><br><span class="line">        SceneManager.LoadScene(<span class="string">&quot;MyScene&quot;</span>, LoadSceneMode.Single);<span class="comment">// 移除旧场景</span></span><br><span class="line">        SceneManager.LoadScene(<span class="string">&quot;MyScene&quot;</span>, LoadSceneMode.Additive);<span class="comment">// 场景叠加</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><p> <strong><em>协同程序，在主程序运行的同时开启另一段逻辑处理，来协同当前程序的执行</em></strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AsyncTest</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    AsyncOperation operation;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        StartCoroutine(loadScene());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 协程方法用来异步加载场景</span></span><br><span class="line">    <span class="function">IEnumerator <span class="title">loadScene</span>()</span>&#123;</span><br><span class="line">        operation = SceneManager.LoadSceneAsync(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 加载完场景不自动跳转</span></span><br><span class="line">        operation.allowSceneActivation = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> operation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">float</span> timer = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 输出加载进度  加载最大数值0-0.9</span></span><br><span class="line">        Debug.Log(operation.progress);</span><br><span class="line">        timer += Time.deltaTime;</span><br><span class="line">        <span class="comment">// 如果到达五秒在进行跳转</span></span><br><span class="line">        <span class="keyword">if</span> (timer &gt; <span class="number">5</span>) &#123;</span><br><span class="line">            operation.allowSceneActivation = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><div class="tip error"><p>error</p></div></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;场景类与场景管理类&quot;&gt;&lt;a href=&quot;#场景类与场景管理类&quot; class=&quot;headerlink&quot; title=&quot;场景类与场景管理类&quot;&gt;&lt;/a&gt;场景类与场景管理类&lt;/h1&gt;&lt;p&gt; &lt;strong&gt;&lt;em&gt;使用场景内前需导入模块using UnityEngine.</summary>
      
    
    
    
    
    <category term="unity&amp;C#学习笔记" scheme="http://example.com/tags/unity-C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C#脚本关于时间与文件路径</title>
    <link href="http://example.com/posts/179b297b.html"/>
    <id>http://example.com/posts/179b297b.html</id>
    <published>2022-10-01T22:00:00.000Z</published>
    <updated>2022-10-23T02:46:36.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-的时间函数"><a href="#C-的时间函数" class="headerlink" title="C#的时间函数"></a>C#的时间函数</h1><ul><li><p>在Start中</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 游戏开始到现在所花时间</span></span><br><span class="line">        Debug.Log(Time.time);</span><br><span class="line">        <span class="comment">// 时间缩放值</span></span><br><span class="line">        Debug.Log(Time.timeScale);</span><br><span class="line">        <span class="comment">// 固定时间间隔</span></span><br><span class="line">        Debug.Log(Time.fixedDeltaTime);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>在Update中</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 计时效果</span></span><br><span class="line">        timer = timer + Time.deltaTime;</span><br><span class="line">        <span class="comment">//上一帧到这一帧所用时间</span></span><br><span class="line">        Debug.Log(Time.deltaTime);</span><br><span class="line">        <span class="keyword">if</span> (timer &gt; <span class="number">3</span>) &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;大于3秒&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 游戏数据文件夹路经(只读， 加密， 压缩)</span></span><br><span class="line">        Debug.Log(Application.dataPath + <span class="string">&quot;/MOMO.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 持久化文件夹路径</span></span><br><span class="line">        Debug.Log(Application.persistentDataPath);</span><br><span class="line">        <span class="comment">// 特殊目录StreamingAssets(只读， 配置文件)</span></span><br><span class="line">        Debug.Log(Application.streamingAssetsPath);</span><br><span class="line">        <span class="comment">// 临时文件夹</span></span><br><span class="line">        Debug.Log(Application.temporaryCachePath);</span><br><span class="line">        <span class="comment">// 控制是否在后台运行</span></span><br><span class="line">        Debug.Log(Application.runInBackground);</span><br><span class="line">        <span class="comment">// 打开一个url</span></span><br><span class="line">        Application.OpenURL(<span class="string">&quot;https://momoeve.top/&quot;</span>);</span><br><span class="line">        <span class="comment">// 退出游戏</span></span><br><span class="line">        Application.Quit();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div class="tip error"><p>error</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-的时间函数&quot;&gt;&lt;a href=&quot;#C-的时间函数&quot; class=&quot;headerlink&quot; title=&quot;C#的时间函数&quot;&gt;&lt;/a&gt;C#的时间函数&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在Start中&lt;/p&gt;
&lt;figure class=&quot;highlight c#&quot;&gt;</summary>
      
    
    
    
    
    <category term="unity&amp;C#学习笔记" scheme="http://example.com/tags/unity-C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C#脚本关于输出语句</title>
    <link href="http://example.com/posts/5e4c8c3.html"/>
    <id>http://example.com/posts/5e4c8c3.html</id>
    <published>2022-10-01T21:00:00.000Z</published>
    <updated>2022-10-23T02:46:36.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h1><h2 id="在Start中"><a href="#在Start中" class="headerlink" title="在Start中"></a>在Start中</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 普通输出</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="comment">// 警告输出</span></span><br><span class="line">        Debug.LogWarning(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">        <span class="comment">// 错误输出</span></span><br><span class="line">        Debug.LogError(<span class="string">&quot;test3&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="在Update中"><a href="#在Update中" class="headerlink" title="在Update中"></a>在Update中</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 绘制一条线（开始点， 结束点， 颜色， 持续时间， 是否被靠近相机的物体遮挡）</span></span><br><span class="line">        Debug.DrawLine(Vector3.zero, Vector3.one);</span><br><span class="line">        <span class="comment">// 绘制射线(长度不是无线需要自己输入长度)参数(射线起点， 射线方向， 颜色)参数二乘以所需长度即可指定长度否则为1</span></span><br><span class="line">        Debug.DrawRay(Vector3.zero, Vector3.up, Color.red);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div class="tip error"><p>error</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;输出语句&quot;&gt;&lt;a href=&quot;#输出语句&quot; class=&quot;headerlink&quot; title=&quot;输出语句&quot;&gt;&lt;/a&gt;输出语句&lt;/h1&gt;&lt;h2 id=&quot;在Start中&quot;&gt;&lt;a href=&quot;#在Start中&quot; class=&quot;headerlink&quot; title=&quot;在St</summary>
      
    
    
    
    
    <category term="unity&amp;C#学习笔记" scheme="http://example.com/tags/unity-C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C#脚本关于Vector3</title>
    <link href="http://example.com/posts/4f978fef.html"/>
    <id>http://example.com/posts/4f978fef.html</id>
    <published>2022-10-01T20:00:01.000Z</published>
    <updated>2022-10-23T02:46:36.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vector3结构体"><a href="#Vector3结构体" class="headerlink" title="Vector3结构体"></a>Vector3结构体</h1><p><strong><em>Vexctor3是属于C#中的结构体，里面包含三个变量x,y,z。可以代表向量，坐标，旋转，缩放</em></strong></p><h2 id="Vector3构造体的基本操作"><a href="#Vector3构造体的基本操作" class="headerlink" title="Vector3构造体的基本操作"></a>Vector3构造体的基本操作</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建结构体</span></span><br><span class="line">Vector3 v = <span class="keyword">new</span> Vector3(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 为快捷创造</span></span><br><span class="line">v2 = Vector3.zero; <span class="comment">// zero = (0, 0, 0)</span></span><br><span class="line">v3 = Vector3.one; <span class="comment">// one = (1, 1, 1)</span></span><br><span class="line"><span class="comment">// 修改构造体</span></span><br><span class="line">v.x = <span class="number">2</span>;</span><br><span class="line">v.y = <span class="number">2</span>;</span><br><span class="line">v.z = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="Vector3构造体的基本运算-向量"><a href="#Vector3构造体的基本运算-向量" class="headerlink" title="Vector3构造体的基本运算(向量)"></a>Vector3构造体的基本运算(向量)</h2><ul><li><p>计算两个向量间的夹角</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(Vector3.Angle(v, v2));</span><br><span class="line">        <span class="comment">// cosa = &lt;v, v2&gt;= v*v2 / |v|*|v2|</span></span><br><span class="line">        <span class="comment">// |v| = (x*x + y*y + z*z) **0.5</span></span><br><span class="line">        <span class="comment">// |v2| = (x2*x2 + y2*y2 + z2*z2) **0.5</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>计算两个向量间的距离</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(Vector3.Distance(v, v2));</span><br><span class="line">    <span class="comment">// b = v*v2 = x*x2 + y*y2 + z*z2</span></span><br><span class="line">    <span class="comment">// b = |v|*|v2|*cosa</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>两个向量间的点乘</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(Vector3.Dot(v, v2));</span><br><span class="line">    <span class="comment">// v · v2 = |v|*|v2|*cosa</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>两个向量间的叉乘</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(Vector3.Cross(v, v2));</span><br><span class="line">    <span class="comment">// 得到一个既垂直于v又垂直于v2的向量假设为n</span></span><br><span class="line">    <span class="comment">// n = v x v2 = (y*z2 - y2*z, x2*z - z2*x, xy2 - x2y)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>插值</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(Vector3.Lerp(Vector3.zero,Vector3.one, <span class="number">0.8f</span>));</span><br><span class="line">    <span class="comment">// 公式start = start + (end - start) * t</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>模长</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(v.magnitude);</span><br><span class="line">    <span class="comment">// |v| = (x*x + y*y + z*z) **0.5 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>规范化向量</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(v.normalized);</span><br><span class="line">    <span class="comment">// 返回大小为一的向量保存原方向，若向量太小则返回0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Vector3构造体的基本运算-旋转"><a href="#Vector3构造体的基本运算-旋转" class="headerlink" title="Vector3构造体的基本运算(旋转)"></a>Vector3构造体的基本运算(旋转)</h2><ul><li><p>欧拉角(360度)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// z轴方向30度</span></span><br><span class="line">    Vector3 rotate = <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">30</span>);</span><br><span class="line">    Quaternion quaternion = Quaternion.identity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>欧拉角转为四元数</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    quaternion = Quaternion.Euler(rotate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>四元数转为欧拉角</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">   rotate = quaternion.eulerAngles;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>看向一个物体</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">   quaternion = Quaternion.LookRotation(<span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip error"><p>error</p></div></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vector3结构体&quot;&gt;&lt;a href=&quot;#Vector3结构体&quot; class=&quot;headerlink&quot; title=&quot;Vector3结构体&quot;&gt;&lt;/a&gt;Vector3结构体&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Vexctor3是属于C#中的结构体，里面包含三个变</summary>
      
    
    
    
    
    <category term="unity&amp;C#学习笔记" scheme="http://example.com/tags/unity-C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C#脚本语言输出顺序(1)</title>
    <link href="http://example.com/posts/e18a0bd3.html"/>
    <id>http://example.com/posts/e18a0bd3.html</id>
    <published>2022-10-01T20:00:00.000Z</published>
    <updated>2022-10-23T02:46:36.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-脚本语言的语句输出顺序"><a href="#C-脚本语言的语句输出顺序" class="headerlink" title="C#脚本语言的语句输出顺序"></a>C#脚本语言的语句输出顺序</h1><p>  <strong><em>以下语句皆为作为在unity中作为组件脚本语句时的输出顺序</em></strong></p><h2 id="Awake"><a href="#Awake" class="headerlink" title="Awake"></a>Awake</h2><ul><li>最优先运行  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Awake最先调用&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="OnEnable"><a href="#OnEnable" class="headerlink" title="OnEnable"></a>OnEnable</h2><ul><li>激活unity组件后调用<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;OnEnable激活组件时调用&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><ul><li>第一次执行OnEnable后调用<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Start调用时机为第一次OnEnable后&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><ul><li>每一帧调用一次<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;每一帧调用之后&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="LateUpdate"><a href="#LateUpdate" class="headerlink" title="LateUpdate"></a>LateUpdate</h2><ul><li>LateUpdate在Update执行后执行一次<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LateUpdate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;LateUpdate在Update执行后执行一次&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="FixedUpdate"><a href="#FixedUpdate" class="headerlink" title="FixedUpdate"></a>FixedUpdate</h2><ul><li>固定间隔执行一次(unity默认0.02秒)<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FixedUpdate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;固定间隔执行一次&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="OnDisable"><a href="#OnDisable" class="headerlink" title="OnDisable"></a>OnDisable</h2><ul><li>OnDisable非激活调用一次<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDisable</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">       Debug.Log(<span class="string">&quot;OnDisable非激活调用一次&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="OnDestroy"><a href="#OnDestroy" class="headerlink" title="OnDestroy"></a>OnDestroy</h2><ul><li>OnDestroy组件销毁时调用<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDestroy</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;OnDestroy组件销毁时调用&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><div class="tip error"><p>error</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-脚本语言的语句输出顺序&quot;&gt;&lt;a href=&quot;#C-脚本语言的语句输出顺序&quot; class=&quot;headerlink&quot; title=&quot;C#脚本语言的语句输出顺序&quot;&gt;&lt;/a&gt;C#脚本语言的语句输出顺序&lt;/h1&gt;&lt;p&gt;  &lt;strong&gt;&lt;em&gt;以下语句皆为作为在uni</summary>
      
    
    
    
    
    <category term="unity&amp;C#学习笔记" scheme="http://example.com/tags/unity-C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
